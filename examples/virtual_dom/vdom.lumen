// Virtual DOM implementation in Lumen
// Provides a declarative way to build and update UI components

struct VNode {
    tag: string
    props: Map<string, string>
    children: Array<VNode>
    text: string
    key: string
}

struct VDom {
    root: VNode
    current_tree: VNode
    previous_tree: VNode
}

// Create a text node
func create_text_node(text: string) -> VNode {
    return VNode{
        tag: "",
        props: Map<string, string>{},
        children: Array<VNode>{},
        text: text,
        key: ""
    }
}

// Create an element node
func create_element(tag: string, props: Map<string, string>, children: Array<VNode>) -> VNode {
    return VNode{
        tag: tag,
        props: props,
        children: children,
        text: "",
        key: ""
    }
}

// Diff two virtual nodes
func diff(old_node: VNode, new_node: VNode) -> Array<string> {
    let patches: Array<string> = Array<string>{}
    
    if old_node.tag != new_node.tag {
        patches.push("REPLACE")
        return patches
    }
    
    if old_node.text != new_node.text {
        patches.push("TEXT")
        return patches
    }
    
    // Diff props
    let old_props = old_node.props
    let new_props = new_node.props
    
    for key in new_props.keys() {
        if old_props.get(key) != new_props.get(key) {
            patches.push("PROPS")
            break
        }
    }
    
    // Diff children
    let old_children = old_node.children
    let new_children = new_node.children
    
    if old_children.length() != new_children.length() {
        patches.push("CHILDREN")
        return patches
    }
    
    for i in 0..old_children.length() {
        let child_patches = diff(old_children.get(i), new_children.get(i))
        for patch in child_patches {
            patches.push(patch)
        }
    }
    
    return patches
}

// Apply patches to DOM
func apply_patches(patches: Array<string>, element_id: string) {
    for patch in patches {
        match patch {
            "REPLACE" => println("Replace element: " + element_id)
            "TEXT" => println("Update text: " + element_id)
            "PROPS" => println("Update props: " + element_id)
            "CHILDREN" => println("Update children: " + element_id)
            _ => println("Unknown patch: " + patch)
        }
    }
}

// Render virtual node to string
func render_to_string(node: VNode) -> string {
    if node.tag == "" {
        return node.text
    }
    
    let result: string = "<" + node.tag
    
    // Add props
    for key in node.props.keys() {
        let value = node.props.get(key)
        result = result + " " + key + "=\"" + value + "\""
    }
    
    result = result + ">"
    
    // Add children
    for child in node.children {
        result = result + render_to_string(child)
    }
    
    result = result + "</" + node.tag + ">"
    return result
}

// Example component: Counter
struct Counter {
    count: int
}

func create_counter() -> Counter {
    return Counter{count: 0}
}

func render_counter(counter: Counter) -> VNode {
    let button_props = Map<string, string>{
        "onclick": "increment()",
        "class": "btn btn-primary"
    }
    
    let count_text = create_text_node("Count: " + counter.count.to_string())
    let button_text = create_text_node("Increment")
    let button = create_element("button", button_props, Array<VNode>{button_text})
    
    let div_props = Map<string, string>{
        "class": "counter"
    }
    
    return create_element("div", div_props, Array<VNode>{count_text, button})
}

func main() -> int {
    // Create a simple virtual DOM tree
    let div_props = Map<string, string>{
        "class": "container",
        "id": "app"
    }
    
    let h1_text = create_text_node("Hello, Lumen Virtual DOM!")
    let h1 = create_element("h1", Map<string, string>{}, Array<VNode>{h1_text})
    
    let p_text = create_text_node("This is a paragraph rendered by Lumen's Virtual DOM.")
    let p = create_element("p", Map<string, string>{}, Array<VNode>{p_text})
    
    let root = create_element("div", div_props, Array<VNode>{h1, p})
    
    // Render to string
    let html = render_to_string(root)
    println("Generated HTML:")
    println(html)
    
    // Create a counter component
    let counter = create_counter()
    let counter_vnode = render_counter(counter)
    
    println("\nCounter component:")
    println(render_to_string(counter_vnode))
    
    // Simulate diffing
    let counter2 = Counter{count: 1}
    let counter_vnode2 = render_counter(counter2)
    
    let patches = diff(counter_vnode, counter_vnode2)
    println("\nPatches needed:")
    for patch in patches {
        println("- " + patch)
    }
    
    return 0
} 